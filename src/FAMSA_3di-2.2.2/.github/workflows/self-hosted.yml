name: Self-hosted CI

on:
  pull_request:
    branches: [ master, develop ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:


jobs:

 ########################################################################################
  checkout:
    name: checkout
    strategy:
      matrix:
        machine: [xeon, tripper, raspberry, m1, old]
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']
    
    steps:
    - uses: actions/checkout@v2
    
    - name: copy sl->slink references
      run: |
        cp ./test/adeno_fiber/sl.fasta ./test/adeno_fiber/slink.fasta
        cp ./test/hemopexin/medoid-sl.fasta ./test/hemopexin/medoid-slink.fasta
      
          
  ########################################################################################
  make-tests:
    name: make
   
    needs: checkout
    strategy:
      fail-fast: false
      matrix:
        # multiple X64 configurations
        machine: [xeon, tripper]
        compiler: [g++-9, g++-10, g++-11]
        platform: [avx2]
        # additional ARM configurations
        include:
        - machine: raspberry
          compiler: g++
          platform: arm8
          
        - machine: m1
          compiler: g++
          platform: m1
          
        - machine: old
          compiler: g++-5
          platform: avx2
        - machine: old
          compiler: g++-6
          platform: avx2
        - machine: old
          compiler: g++-7
          platform: avx2
        - machine: old
          compiler: g++-8
          platform: avx2
 
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']

    steps:
    - name: make
      run: | 
        make -j32 CXX=${{matrix.compiler}} PLATFORM=${{matrix.platform}}
        cp ./famsa ./famsa-${{matrix.compiler}}
        make clean
        
  ########################################################################################        
         
  small-tests:
    name: small tests
    needs: make-tests
    strategy:
      fail-fast: false
      matrix:
        machine: [xeon, tripper]
        compiler: [g++-9, g++-10, g++-11]
        # additional ARM configurations
        include:
        - machine: raspberry
          compiler: g++
          
        - machine: m1
          compiler: g++
        
     
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']    
    
    steps:
    - name: single sequence
      run: |
        ./famsa-${{matrix.compiler}} ./test/dummy/one-seq out.fasta
        cmp out.fasta ./test/dummy/one-seq.aln
        
    - name: two duplicates
      run: |
        ./famsa-${{matrix.compiler}} ./test/dummy/two-seq out.fasta
        cmp out.fasta ./test/dummy/two-seq.aln
        
    - name: two duplicates (kept)
      run: |
        ./famsa-${{matrix.compiler}} -keep-duplicates ./test/dummy/two-seq out.fasta
        cmp out.fasta ./test/dummy/two-seq.aln   
        
    - name: many duplicates
      run: |
        ./famsa-${{matrix.compiler}} ./test/dummy/many-seq out.fasta
        cmp out.fasta ./test/dummy/many-seq.aln 
        
    - name: many duplicates (kept)
      run: |
        ./famsa-${{matrix.compiler}} -keep-duplicates ./test/dummy/many-seq out.fasta
        cmp out.fasta ./test/dummy/many-seq.aln    
  
  ########################################################################################    
    
  full-tree:
    name: adeno-fiber - full tree
    needs: small-tests
    strategy:
      fail-fast: false
      matrix:
        machine: [xeon, tripper]
        compiler: [g++-9, g++-10, g++-11]
        tree: [sl, upgma, slink]
        # additional ARM configurations
        include:
        - machine: raspberry
          compiler: g++
          tree: sl
        - machine: raspberry
          compiler: g++
          tree: upgma
        - machine: raspberry
          compiler: g++
          tree: slink

        - machine: m1
          compiler: g++
          tree: sl
        - machine: m1
          compiler: g++
          tree: upgma
        - machine: m1
          compiler: g++
          tree: slink
   
        - machine: old
          compiler: g++-5
          tree: sl
        - machine: old
          compiler: g++-6
          tree: sl
        - machine: old
          compiler: g++-7
          tree: sl
        - machine: old
          compiler: g++-8
          tree: sl
          
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']
        
    env: 
      REF_DIR: ./test/adeno_fiber
      INPUT: ./test/adeno_fiber/adeno_fiber
 
    steps:  

    - name: ${{matrix.tree}} (tree only)
      run: |
        ./famsa-${{matrix.compiler}} -gt ${{matrix.tree}} -gt_export ${INPUT} ${{matrix.tree}}.dnd
        cmp ${{matrix.tree}}.dnd ${REF_DIR}/${{matrix.tree}}.dnd
    
    - name: ${{matrix.tree}} (complete alignment)
      run: |
        ./famsa-${{matrix.compiler}} -gt ${{matrix.tree}} ${INPUT} ${{matrix.tree}}.fasta
        cmp ${{matrix.tree}}.fasta ${REF_DIR}/${{matrix.tree}}.fasta
     
    - name: ${{matrix.tree}} (from tree)
      run: |
        ./famsa-${{matrix.compiler}} -gt import ${{matrix.tree}}.dnd ${INPUT} ${{matrix.tree}}.dnd.fasta
        cmp ${{matrix.tree}}.dnd.fasta ${REF_DIR}/${{matrix.tree}}.fasta
        
    - name: ${{matrix.tree}} (gzip)
      run: |
        ./famsa-${{matrix.compiler}} -gz -gt ${{matrix.tree}} ${INPUT} ${{matrix.tree}}.fasta.gz
        pigz -f -d ${{matrix.tree}}.fasta.gz
        cmp ${{matrix.tree}}.fasta ${REF_DIR}/${{matrix.tree}}.fasta
        
  ########################################################################################    

  full-tree-duplicates:
    name: adeno-fiber - duplicates
    needs: small-tests
    strategy:
      fail-fast: false
      matrix:
        machine: [xeon, tripper]
        compiler: [g++-9, g++-11]
        tree: [sl]
        # additional ARM configurations
        include:
        - machine: raspberry
          compiler: g++
          tree: sl
          
        - machine: m1
          compiler: g++
          tree: sl
     
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']
        
    env: 
      REF_DIR: ./test/adeno_fiber_duplicates
      INPUT: ./test/adeno_fiber_duplicates/adeno_fiber_duplicates
 
    steps:  

    - name: ${{matrix.tree}} (tree only)
      run: |
        ./famsa-${{matrix.compiler}} -gt ${{matrix.tree}} -gt_export ${INPUT} ${{matrix.tree}}.dnd
        cmp ${{matrix.tree}}.dnd ${REF_DIR}/${{matrix.tree}}.dnd
    
    - name: ${{matrix.tree}} (complete alignment)
      run: |
        ./famsa-${{matrix.compiler}} -gt ${{matrix.tree}} ${INPUT} ${{matrix.tree}}.fasta
        cmp ${{matrix.tree}}.fasta ${REF_DIR}/${{matrix.tree}}.fasta
     
    - name: ${{matrix.tree}} (from tree)
      run: |
        ./famsa-${{matrix.compiler}} -gt import ${{matrix.tree}}.dnd ${INPUT} ${{matrix.tree}}.dnd.fasta
        cmp ${{matrix.tree}}.dnd.fasta ${REF_DIR}/${{matrix.tree}}.fasta
        
 ########################################################################################    
    
  medoid-tree:
    name: hemopexin - medoid tree
    needs: full-tree
    strategy:
      fail-fast: false
      matrix:
        machine: [xeon, tripper]
        compiler: [g++-9, g++-10, g++-11]
        tree: [sl, upgma, slink, nj]
        # additional ARM configurations
        include:
        - machine: raspberry
          compiler: g++
          tree: sl
        - machine: raspberry
          compiler: g++
          tree: upgma
        - machine: raspberry
          compiler: g++
          tree: slink
        - machine: raspberry
          compiler: g++
          tree: nj
          
        - machine: m1
          compiler: g++
          tree: sl
        - machine: m1
          compiler: g++
          tree: upgma
        - machine: m1
          compiler: g++
          tree: slink
        - machine: m1
          compiler: g++
          tree: nj
          
          
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']
      
    env: 
      REF_DIR: ./test/hemopexin
      INPUT: ./test/hemopexin/hemopexin
 
    steps:  

    - name: medoid + ${{matrix.tree}}  (tree only)
      run: |
        ./famsa-${{matrix.compiler}} -medoidtree -gt ${{matrix.tree}} -gt_export ${INPUT} medoid-${{matrix.tree}}.dnd
        cmp  medoid-${{matrix.tree}}.dnd ${REF_DIR}/medoid-${{matrix.tree}}.dnd
    
    - name: medoid + ${{matrix.tree}}  (complete alignment)
      run: |
        ./famsa-${{matrix.compiler}} -medoidtree -gt ${{matrix.tree}} ${INPUT} medoid-${{matrix.tree}}.fasta
        cmp medoid-${{matrix.tree}}.fasta ${REF_DIR}/medoid-${{matrix.tree}}.fasta
     
    - name: medoid + ${{matrix.tree}}  (from tree)
      run: |
        ./famsa-${{matrix.compiler}} -gt import medoid-${{matrix.tree}}.dnd ${INPUT} medoid-${{matrix.tree}}.dnd.fasta
        cmp medoid-${{matrix.tree}}.dnd.fasta ${REF_DIR}/medoid-${{matrix.tree}}.fasta
        
    - name: medoid + ${{matrix.tree}}  (non-default params)
      run: |
        ./famsa-${{matrix.compiler}} -medoidtree -gt ${{matrix.tree}} -gt_export -subtree_size 10 -sample_size 100 -cluster_fraction 0.2 -cluster_iters 1 ${INPUT} medoid-${{matrix.tree}}-params.dnd
        cmp  medoid-${{matrix.tree}}-params.dnd ${REF_DIR}/medoid-${{matrix.tree}}-params.dnd
  
  ########################################################################################    

  medoid-tree-duplicates:
    name: hemopexin - duplicates
    needs: full-tree
    strategy:
      fail-fast: false
      matrix:
        machine: [xeon, tripper]
        compiler: [g++-9, g++-11]
        tree: [sl]
        # additional ARM configurations
        include:
        - machine: raspberry
          compiler: g++
          tree: sl
        
        - machine: m1
          compiler: g++
          tree: sl
     
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']
        
    env: 
      REF_DIR: ./test/hemopexin_duplicates
      INPUT: ./test/hemopexin_duplicates/hemopexin_duplicates
 
    steps:  

    - name: medoid + ${{matrix.tree}}  (tree only)
      run: |
        ./famsa-${{matrix.compiler}} -medoidtree -gt ${{matrix.tree}} -gt_export ${INPUT} medoid-${{matrix.tree}}.dnd
        cmp  medoid-${{matrix.tree}}.dnd ${REF_DIR}/medoid-${{matrix.tree}}.dnd
    
    - name: medoid + ${{matrix.tree}}  (complete alignment)
      run: |
        ./famsa-${{matrix.compiler}} -medoidtree -gt ${{matrix.tree}} ${INPUT} medoid-${{matrix.tree}}.fasta
        cmp medoid-${{matrix.tree}}.fasta ${REF_DIR}/medoid-${{matrix.tree}}.fasta
     
    - name: medoid + ${{matrix.tree}}  (from tree)
      run: |
        ./famsa-${{matrix.compiler}} -gt import medoid-${{matrix.tree}}.dnd ${INPUT} medoid-${{matrix.tree}}.dnd.fasta
        cmp medoid-${{matrix.tree}}.dnd.fasta ${REF_DIR}/medoid-${{matrix.tree}}.fasta
        
        
    - name: medoid + ${{matrix.tree}} + keep duplicates (tree only)
      run: |
        ./famsa-${{matrix.compiler}} -keep-duplicates -medoidtree -gt ${{matrix.tree}} -gt_export ${INPUT} medoid-${{matrix.tree}}-dups.dnd
        cmp  medoid-${{matrix.tree}}-dups.dnd ${REF_DIR}/medoid-${{matrix.tree}}-dups.dnd
    
    - name: medoid + ${{matrix.tree}} + keep duplicates (complete alignment)
      run: |
        ./famsa-${{matrix.compiler}} -keep-duplicates -medoidtree -gt ${{matrix.tree}} ${INPUT} medoid-${{matrix.tree}}-dups.fasta
        cmp medoid-${{matrix.tree}}-dups.fasta ${REF_DIR}/medoid-${{matrix.tree}}-dups.fasta
     
    - name: medoid + ${{matrix.tree}} + keep duplicates (from tree)
      run: |
        ./famsa-${{matrix.compiler}} -keep-duplicates -gt import medoid-${{matrix.tree}}-dups.dnd ${INPUT} medoid-${{matrix.tree}}-dups.dnd.fasta
        cmp medoid-${{matrix.tree}}-dups.dnd.fasta ${REF_DIR}/medoid-${{matrix.tree}}-dups.fasta    
  
  ########################################################################################        
         
  other-tests:
    name: adeno-fiber - other tests
    needs: small-tests
    strategy:
      fail-fast: false
      matrix:
        machine: [xeon, tripper]
        compiler: [g++-9, g++-10, g++-11]
        # additional ARM configurations
        include:
        - machine: raspberry
          compiler: g++
          
        - machine: m1
          compiler: g++
        
     
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']    
        
    env: 
      REF_DIR: ./test/adeno_fiber
      INPUT: ./test/adeno_fiber/adeno_fiber
     
    steps:
    
    - name: non-default gaps
      run: |
        ./famsa-${{matrix.compiler}} -go 10 -ge 2 -tgo 0.5 -tge 1.0 -gsd 3 -gsl 30 ${INPUT} gaps.fasta
        cmp gaps.fasta ${REF_DIR}/gaps.fasta
        
    - name: no refinement
      run: |
        ./famsa-${{matrix.compiler}} -gt import ${REF_DIR}/upgma.dnd -refine_mode off ${INPUT} upgma.no_refine.fasta
        cmp upgma.no_refine.fasta ${REF_DIR}/upgma.no_refine.fasta
        
    - name: profile-profile alignment
      run: |
        ./famsa-${{matrix.compiler}} -refine_mode off ${REF_DIR}/upgma.no_refine.part1.fasta ${REF_DIR}/upgma.no_refine.part2.fasta upgma.pp.fasta
        cmp upgma.pp.fasta ${REF_DIR}/upgma.pp.fasta
    
    - name: export distance
      run: |
        ./famsa-${{matrix.compiler}} -dist_export ${INPUT} dist.csv
        cmp dist.csv ${REF_DIR}/dist.csv
        
    - name: export distance (square)
      run: |
        ./famsa-${{matrix.compiler}} -dist_export -square_matrix ${INPUT} dist_sq.csv
        cmp dist_sq.csv ${REF_DIR}/dist_sq.csv
        
    - name: export pid
      run: |
        ./famsa-${{matrix.compiler}} -dist_export -pid ${INPUT} pid.csv
        cmp pid.csv ${REF_DIR}/pid.csv
        
    - name: export pid (square)
      run: |
        ./famsa-${{matrix.compiler}} -dist_export -square_matrix -pid ${INPUT} pid_sq.csv
        cmp pid_sq.csv ${REF_DIR}/pid_sq.csv
        
    - name: align the alignment
      run: |
        ./famsa-${{matrix.compiler}} ${REF_DIR}/upgma.fasta upgma2sl.fasta
        cmp upgma2sl.fasta ${REF_DIR}/sl.fasta
        
    - name: non-standard symbols
      run: |
        ./famsa-${{matrix.compiler}} ./test/adeno_fiber_extra/adeno_fiber_extra out.fasta
        cmp out.fasta ./test/adeno_fiber_extra/ref.fasta
      
########################################################################################
  noavx-tests:
    name: distances only - different TRipper SIMD extensions 
    runs-on: [self-hosted, famsa, tripper]
    needs: small-tests
    strategy:
      fail-fast: false
      matrix:
        compiler: [g++-9, g++-10, g++-11]
        platform: [none, sse4, avx]
        
    env: 
      REF_DIR: ./test/adeno_fiber
      INPUT: ./test/adeno_fiber/adeno_fiber
        
    steps:
    - name: clean
      run: make clean
    - name: make (${{matrix.compiler}}, CPU extension ${{matrix.platform}})
      run: | 
        make -j32 CXX=${{matrix.compiler}} PLATFORM=${{matrix.platform}}
    - name: distance calculation
      run: |
        ./famsa -dist_export ${INPUT} dist.csv
        cmp dist.csv ${REF_DIR}/dist.csv 

########################################################################################
  huge-tree:
    name: LRR - 100k trees
    runs-on: [self-hosted, famsa, '${{ matrix.machine }}']
    needs: full-tree
    strategy:
      fail-fast: false
      matrix:
        machine: [xeon, tripper]
        compiler: [g++-9, g++-11]
        tree: [sl]
        
        include:
        - machine: m1
          compiler: g++
          tree: sl
          
    env: 
      REF_DIR: ./test/LRR
      INPUT: ./test/LRR/LRR
        
    steps:
    - name: ${{matrix.tree}} (tree only)
      run: |
        ./famsa-${{matrix.compiler}} -gt ${{matrix.tree}} -gt_export ${INPUT} ${{matrix.tree}}.dnd
        cmp ${{matrix.tree}}.dnd ${REF_DIR}/${{matrix.tree}}.dnd
    
    - name: ${{matrix.tree}} (full alignment)
      run: |
         ./famsa-${{matrix.compiler}} -gt ${{matrix.tree}} ${{matrix.tree}}.fasta
    
    - name: ${{matrix.tree}} (from tree)
      run: |
         ./famsa-${{matrix.compiler}} -gt import ${{matrix.tree}}.dnd ${{matrix.tree}}.dnd.fasta
          cmp ${{matrix.tree}}.dnd.fasta ${{matrix.tree}}.fasta
        
